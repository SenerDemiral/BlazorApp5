@page "/counter"

<PageTitle>Counter</PageTitle>

<div class="card">
    <div class="card-header">
        <div class="d-flex flex-nowrap gap-2 overflow-auto">
            @foreach(var d in cmpntDic)
            {
                <div @key="d.Key" class="btn-group" >
   
                    <button class="@d.Value.TabClass" style="max-width:100px" @onclick="() => TabSelect(d.Key)">@d.Value.Text</button>
                    <button class="btn btn-outline-secondary btn-sm " @onclick="() => TabRemove(d.Key)">x</button>

                </div>
            }
        </div>
    </div>
    <div class="card-body">
        <CascadingValue Value=this>
            @foreach(var d in cmpntDic)
            {
                <div class="@d.Value.Class">
                    <DynamicComponent @key="d.Key" Type="@d.Value.Type" Parameters="d.Value.Params"/>
                </div>
            }
        </CascadingValue>
    </div>
</div>




@code {
    //<DynamicComponent @key="d.Key" Type="@Type.GetType("FireBird.Pages."+d.Value.CmpntName)" Parameters="d.Value.CmpntParams"/>

    private int currentCount = 0;
    private int curKey = 0;
    private int key = 0;

    public Dictionary<int, Cmpnt> cmpntDic = new();

    private void IncrementCount(MouseEventArgs e)
    {
        currentCount++;
    }

    private void TabSelect(int tabKey)
    {
        if(tabKey != curKey)
        {
            cmpntDic[curKey].Class = "d-none";
            cmpntDic[curKey].TabClass = "btn btn-outline-primary btn-sm";
            curKey = tabKey;
        }
        cmpntDic[tabKey].Class = "d-block";
        cmpntDic[tabKey].TabClass = "btn btn-primary btn-sm";
    }

    private void TabRemove(int tabKey)
    {
        cmpntDic[curKey].Class = "d-none";
        cmpntDic[curKey].TabClass = "btn btn-outline-primary btn-sm";

        cmpntDic.Remove(tabKey);
        curKey = cmpntDic.Keys.First();
        TabSelect(curKey);
    }

    public int AddDynComp(string text, Type type, Dictionary<string, object> prms)
    {
        key++;
        cmpntDic.Add(key, new Cmpnt { Text = text, Type = type, Params = prms });
        TabSelect(key);
        StateHasChanged();

        return key;
    }

    protected override async Task OnInitializedAsync()
    {
        cmpntDic.Add(key++, new Cmpnt { Text = "Aa1", Type = typeof(Aa), Params = new ()
          {
            { "P1", "Ooh, no." },
            { "P2", "Ooh, yes." }
          } });
        cmpntDic.Add(key++, new Cmpnt { Text = "Bb1", Type = typeof(Bb) });
        cmpntDic.Add(key++, new Cmpnt { Text = "FetchData", Type = typeof(FetchData) });

        cmpntDic.Add(key++, new Cmpnt { Text = "Aa2", Type = typeof(Aa) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Bb2", Type = typeof(Bb) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Cc2", Type = typeof(Cc) });
        
        cmpntDic.Add(key++, new Cmpnt { Text = "Aa3", Type = typeof(Aa) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Bb3", Type = typeof(Bb) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Cc3", Type = typeof(Cc) });

        cmpntDic.Add(key++, new Cmpnt { Text = "Aa4", Type = typeof(Aa) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Bb4", Type = typeof(Bb) });
        cmpntDic.Add(key++, new Cmpnt { Text = "Index", Type = typeof(Index) });

        TabSelect(0);

        var selectedType = Type.GetType($"FireBird.Pages.{cmpntDic[0].Text}");
}

    public class Cmpnt
    {
        public string Text { get; set; }
        public Type Type { get; set; }
        public Dictionary<string, object> Params { get; set; }
        public string Class { get; set; } = "d-none";
        public string TabClass { get; set; } = "btn btn-outline-primary btn-sm";
    }
}
