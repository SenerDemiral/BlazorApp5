@page "/counter"

<MudDynamicTabs 
	@ref="mdt"
	Elevation="4" 
	Rounded="true" 
	ApplyEffectsToContainer="false" 
	DisableRipple="false"
	HideSlider="true"
	Outlined="false"
	AddTab="AddTabCallback" 
	CloseTab="@((panel) => CloseTabCallback(panel))" 
	PanelClass="px-4 py-6"
	@bind-ActivePanelIndex="_index"
	AddIconToolTip="Click here to add a new tab" 
	CloseIconToolTip="Close this tab. All data will be lost"
	KeepPanelsAlive="true">
	
	
	@foreach (var item in _tabs)
	{
		<MudTabPanel Text="@item.Name" Tag="@item.Id" @key="item.Id">
			@item.Content
			<DynamicComponent Type="@Type.GetType("MudBlazorApp.Pages."+item.CmpntName)" />
		</MudTabPanel>
	}
</MudDynamicTabs>

<MudButton Color="Color.Primary" OnClick="Restore" Size="Size.Small" Class="ml-2 mt-1 mb-n2">Restore</MudButton>

@*
@foreach (var item in _tabs)
	{
		<div @key="item.Id" class="@item.Visible">
			<DynamicComponent Type="@Type.GetType("MudBlazorApp.Pages."+item.CmpntName)"  />
		</div>
	}

*@
@code {
	//ActivePanelIndexChanged="@((i) => ActivePanelChanged(i))"

	private class TabView
	{
		public String Name { get; set; }
		public String Content { get; set; }
		public Guid Id { get; set; }
		public String CmpntName { get; set; }
		public String Visible { get; set; }
	}

	private MudDynamicTabs mdt;
	private List<TabView> _tabs = new();
	private int _index = 0;
	private bool _updateIndex = false;

	public void ActivePanelChanged(int i)
	{
		_index = i;
		var aaa = _tabs[i].CmpntName;
	}

	private void Restore()
	{
		_tabs.Clear();
		_tabs.Add(new TabView { Content = "First tab content", Name = "Tab A", Id = Guid.NewGuid(), CmpntName = nameof(Aa), Visible = "d-none" });
		_tabs.Add(new TabView { Content = "Second tab content", Name = "Tab B", Id = Guid.NewGuid(), CmpntName = nameof(Bb), Visible = "d-block" });
		_tabs.Add(new TabView { Content = "Third tab content", Name = "Tab C", Id = Guid.NewGuid(), CmpntName = nameof(Cc), Visible = "d-none" });
		_updateIndex = true;
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		Restore();
	}

	private void AddTabCallback()
	{
		_tabs.Add(new TabView { Name = "Dynamic Content", Content = "A new tab", Id = Guid.NewGuid(), CmpntName = nameof(FetchData) });
		//the tab becomes available after it is rendered. Hence, we can't set the index here
		_updateIndex = true;
	}

	private void CloseTabCallback(MudTabPanel panel)
	{
		var aaa = panel.PanelRef;
		if (_tabs.Count == 1)
		{
			_updateIndex = true;
			return;
		}
		var tabView = _tabs.FirstOrDefault(x => x.Id == (Guid)panel.Tag);
		if(tabView != null)
		{
			_tabs.Remove(tabView);
			_updateIndex = true;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(_updateIndex == true)
		{
			_index = _tabs.Count - 1;
			var aaa = _tabs[_index];
			//StateHasChanged();
			InvokeAsync(() => StateHasChanged());
			_updateIndex = false;
		}
	}
}