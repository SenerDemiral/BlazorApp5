@page "/"

@implements IDisposable
@inject StateContainer StateContainer
@inject LoginService LoginService

<PageTitle>Index</PageTitle>

<h1>Hello, world! @StateContainer.UsrName </h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@if (StateContainer.UsrId == 0)
{
    <EditForm Model="LoginModel" Context="Login">
        <div class="login-form">
            <div>Username </div>
            <InputText @bind-Value="LoginModel.UsrName"></InputText>
            <div>Password </div>
            <InputText type="password" @bind-Value="LoginModel.UsrPwd"></InputText>
            <button style="grid-column: 1/3;" @onclick="TryLogin">Login</button>
        </div>
    </EditForm>
}
<style>
    .login-form {
        display: grid;
        grid-template-columns: auto auto; 
        align-items: center;
        padding: 10px;
        gap: 5px;
        border:1px solid; 
        max-width: 300px;
    }
</style>

@code{
    private LoginModel LoginModel { get; set; } = new();

    private async Task TryLogin()
    {
        await LoginService.TryLoginAsync(LoginModel);
        //await LoginService.LoginAsync(LoginFormModel.Username, LoginFormModel.Password);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("Index.SetParametersAsync..Bgn");
        await base.SetParametersAsync(parameters);
        Console.WriteLine("Index.SetParametersAsync..End");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine("Index.OnInitializedAsync..");
    }

    protected override void OnInitialized()
    {
        StateContainer.OnChangeUser += StateHasChanged;
    }
    protected async void ChangeState()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected void ChangeState3()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        StateContainer.OnChangeUser -= StateHasChanged;
    }
}
