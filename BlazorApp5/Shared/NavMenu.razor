@implements IDisposable
@inject StateContainer StateContainer
@inject LoginService LoginService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp5</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch DATA
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="chatroom">
                <span class="oi oi-list-rich" aria-hidden="true"></span> ChatRoom
            </NavLink>
        </div>

        @if (StateContainer.UsrId == 0)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link"  href="#" @onclick="LoginUser">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                </NavLink>            
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link"  href="#" @onclick="LoginService.LogoutAsync">
                    <span class="oi oi-account-logout" aria-hidden="true"></span>@StateContainer.UsrName
                </NavLink>            
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

@code{
    
    private async Task LoginUser()
    {
        //myAppState.setUsr(0, "");
       
        //await ProtectedLocalStorage.SetAsync("kort", "SENER");
        //StateContainer.Property = "SENER";

        //await LoginService.LoginAsync("sener", "SENER");
    }

    //public override async Task SetParametersAsync(ParameterView parameters)
    //{
    //    Console.WriteLine("NavMenu.SetParametersAsync..Bgn");
    //    await base.SetParametersAsync(parameters);
    //    Console.WriteLine("NavMenu.SetParametersAsync..End");
    //}

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //    Console.WriteLine("NavMenu.OnInitializedAsync..");
    //}

    protected override void OnInitialized()
    {
        StateContainer.OnChangeUser += StateHasChanged;
    }
    
    public void Dispose()
    {
        StateContainer.OnChangeUser -= StateHasChanged;
    }
}
